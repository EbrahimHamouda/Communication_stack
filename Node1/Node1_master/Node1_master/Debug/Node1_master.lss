
Node1_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000006b6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ff  00800066  00800066  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000163b  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c00  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d39  00000000  00000000  00002b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d4  00000000  00000000  00003c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084f  00000000  00000000  0000465c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004eab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_12>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_13>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 03 	call	0x66c	; 0x66c <main>
  8a:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_12>:
}

uint8 spi_Rx()
{
	return READ_REG_8BIT((SPI_BASE+SPIDATAREG));
}
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	8f b1       	in	r24, 0x0f	; 15
  b6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
  ba:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
  be:	09 95       	icall
  c0:	ff 91       	pop	r31
  c2:	ef 91       	pop	r30
  c4:	bf 91       	pop	r27
  c6:	af 91       	pop	r26
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	7f 91       	pop	r23
  ce:	6f 91       	pop	r22
  d0:	5f 91       	pop	r21
  d2:	4f 91       	pop	r20
  d4:	3f 91       	pop	r19
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <spi_init>:
  e2:	fc 01       	movw	r30, r24
  e4:	1d b8       	out	0x0d, r1	; 13
  e6:	2d b1       	in	r18, 0x0d	; 13
  e8:	85 81       	ldd	r24, Z+5	; 0x05
  ea:	82 2b       	or	r24, r18
  ec:	90 81       	ld	r25, Z
  ee:	20 e8       	ldi	r18, 0x80	; 128
  f0:	92 9f       	mul	r25, r18
  f2:	a0 01       	movw	r20, r0
  f4:	11 24       	eor	r1, r1
  f6:	28 2f       	mov	r18, r24
  f8:	24 2b       	or	r18, r20
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	30 e2       	ldi	r19, 0x20	; 32
  fe:	93 9f       	mul	r25, r19
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	92 81       	ldd	r25, Z+2	; 0x02
 108:	40 e1       	ldi	r20, 0x10	; 16
 10a:	94 9f       	mul	r25, r20
 10c:	90 01       	movw	r18, r0
 10e:	11 24       	eor	r1, r1
 110:	28 2b       	or	r18, r24
 112:	83 81       	ldd	r24, Z+3	; 0x03
 114:	88 0f       	add	r24, r24
 116:	88 0f       	add	r24, r24
 118:	88 0f       	add	r24, r24
 11a:	28 2b       	or	r18, r24
 11c:	84 81       	ldd	r24, Z+4	; 0x04
 11e:	88 0f       	add	r24, r24
 120:	88 0f       	add	r24, r24
 122:	28 2b       	or	r18, r24
 124:	2d b9       	out	0x0d, r18	; 13
 126:	6e 9a       	sbi	0x0d, 6	; 13
 128:	08 95       	ret

0000012a <spi_InterruptDisable>:
 12a:	6f 98       	cbi	0x0d, 7	; 13
 12c:	08 95       	ret

0000012e <spi_Tx>:

void spi_Tx(uint8 data)
{
	WRITE_REG_8BIT((SPI_BASE+SPIDATAREG),data);
 12e:	8f b9       	out	0x0f, r24	; 15
 130:	08 95       	ret

00000132 <Spi_AssignCallBack>:
	//while (SPI_BUSY);
}

void Spi_AssignCallBack(void(*ptr_CallBackFun)(uint8))
{
	static_PtrCallBackFun= ptr_CallBackFun ;
 132:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 136:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 13a:	08 95       	ret

0000013c <__vector_14>:
}

void Uart_TxInterruptEnable(void (*ptr)())
{
	ptr_CallBackfnUartTx=ptr;           // assign ptr to call back fun
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<UDRIE;                  // enable interrupt when buffer is empty
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ptr_CallBackfnUartTx>
 162:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ptr_CallBackfnUartTx+0x1>
 166:	09 95       	icall
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_13>:
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
 1ac:	8c b1       	in	r24, 0x0c	; 12
 1ae:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <ptr_CallBackfnUartRx>
 1b2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <ptr_CallBackfnUartRx+0x1>
 1b6:	09 95       	icall
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <Uart_init>:
 1da:	89 e1       	ldi	r24, 0x19	; 25
 1dc:	89 b9       	out	0x09, r24	; 9
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	88 61       	ori	r24, 0x18	; 24
 1e2:	8a b9       	out	0x0a, r24	; 10
 1e4:	80 b5       	in	r24, 0x20	; 32
 1e6:	86 68       	ori	r24, 0x86	; 134
 1e8:	80 bd       	out	0x20, r24	; 32
 1ea:	08 95       	ret

000001ec <Uart_RxInterruptEnable>:
}

void  Uart_RxInterruptEnable(void (*ptr)(uint8))
{
	ptr_CallBackfnUartRx = ptr;         // assign ptr to call back fun
 1ec:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ptr_CallBackfnUartRx+0x1>
 1f0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ptr_CallBackfnUartRx>
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<RXCIE;                  // enable interrupt when data recieved 
 1f4:	57 9a       	sbi	0x0a, 7	; 10
 1f6:	08 95       	ret

000001f8 <HardWare_CallBack>:
	* check if the buffer lock first
	* set flage the new data received 
	* buffer the received data  
	*/
	
	RX_FlageDataReciving  = 1;					//set flage to make dispatcher look at the new data
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <RX_FlageDataReciving>
	Rx_Buffer[RX_Buffer_Index++] = data;		//store in buffer and increament the index
 1fe:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <RX_Buffer_Index>
 202:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <RX_Buffer_Index+0x1>
 206:	a9 01       	movw	r20, r18
 208:	4f 5f       	subi	r20, 0xFF	; 255
 20a:	5f 4f       	sbci	r21, 0xFF	; 255
 20c:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <RX_Buffer_Index+0x1>
 210:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <RX_Buffer_Index>
 214:	f9 01       	movw	r30, r18
 216:	ed 58       	subi	r30, 0x8D	; 141
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <RX_CommFree>:
#define CHANNEL_SLECTE			   static_RX_cnfg.channel
#define CNFRMATION_LETTER		   static_RX_cnfg.cofm_letter

void RX_CommFree(void)
{
	RX_Buffer_Index = 0;   
 21e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <RX_Buffer_Index+0x1>
 222:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <RX_Buffer_Index>
	RX_FlageDataReciving =0; 
 226:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <RX_FlageDataReciving>
 22a:	08 95       	ret

0000022c <Comm_RxInit>:
	RX_FlageDataReciving  = 1;					//set flage to make dispatcher look at the new data
	Rx_Buffer[RX_Buffer_Index++] = data;		//store in buffer and increament the index
}

void Comm_RxInit(RX_cfg_t* ptr_cfg_str)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
* free the comm from pervious usage 
* save the confg in static variable 
* switch to the channel selected to set the hardware
*/

	RX_CommFree(); // make sure the buffer ready to start RX_in
 232:	0e 94 0f 01 	call	0x21e	; 0x21e <RX_CommFree>
	static_RX_cnfg.ptr_user_fun = ptr_cfg_str->ptr_user_fun;	// call user funcation
 236:	ec e6       	ldi	r30, 0x6C	; 108
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	88 81       	ld	r24, Y
 23c:	99 81       	ldd	r25, Y+1	; 0x01
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
	static_RX_cnfg.channel		= ptr_cfg_str->channel;
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	82 83       	std	Z+2, r24	; 0x02
	static_RX_cnfg.cofm_letter  = ptr_cfg_str->cofm_letter;
 246:	9b 81       	ldd	r25, Y+3	; 0x03
 248:	93 83       	std	Z+3, r25	; 0x03

	switch(CHANNEL_SLECTE) //init the hardware
 24a:	81 11       	cpse	r24, r1
 24c:	06 c0       	rjmp	.+12     	; 0x25a <Comm_RxInit+0x2e>
	{
#ifdef _UART0_ 
		case UART0:
		{
			Uart_init();
 24e:	0e 94 ed 00 	call	0x1da	; 0x1da <Uart_init>
			Uart_RxInterruptEnable(HardWare_CallBack); 
 252:	8c ef       	ldi	r24, 0xFC	; 252
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Uart_RxInterruptEnable>
			I2C_AssignCallBackRX(HardWare_CallBack);
			break;
		}
#endif
	}
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <RX_com_dispatch>:

void RX_com_dispatch() 
{
	if (RX_FlageDataReciving)			// check the flage 
 260:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <RX_FlageDataReciving>
 264:	88 23       	and	r24, r24
 266:	a9 f0       	breq	.+42     	; 0x292 <RX_com_dispatch+0x32>
	{

		 RX_FlageDataReciving=0;				// clear the recived data
 268:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <RX_FlageDataReciving>
		 if (Rx_Buffer[RX_Buffer_Index-1] == static_RX_cnfg.cofm_letter)  // check the confirmation letter
 26c:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <RX_Buffer_Index>
 270:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <RX_Buffer_Index+0x1>
 274:	fb 01       	movw	r30, r22
 276:	ee 58       	subi	r30, 0x8E	; 142
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	90 81       	ld	r25, Z
 27c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <static_RX_cnfg+0x3>
 280:	98 13       	cpse	r25, r24
 282:	07 c0       	rjmp	.+14     	; 0x292 <RX_com_dispatch+0x32>
		 {
			 Rx_Buffer[RX_Buffer_Index-1] = static_RX_cnfg.cofm_letter;
			static_RX_cnfg.ptr_user_fun(Rx_Buffer,RX_Buffer_Index);	
 284:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <static_RX_cnfg>
 288:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <static_RX_cnfg+0x1>
 28c:	83 e7       	ldi	r24, 0x73	; 115
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	09 95       	icall
 292:	08 95       	ret

00000294 <HardWare_CallBack>:



static void HardWare_CallBack()
{
	if (Scounter<=NUM_BYTES)  // if hardware interrupts faster than the checking dispatcher 
 294:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <Scounter>
 298:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <Scounter+0x1>
 29c:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <Staticptr_cngCommTx+0x4>
 2a0:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <Staticptr_cngCommTx+0x5>
 2a4:	28 17       	cp	r18, r24
 2a6:	39 07       	cpc	r19, r25
 2a8:	18 f1       	brcs	.+70     	; 0x2f0 <HardWare_CallBack+0x5c>
	{
		switch (S_CHANNEL)
 2aa:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <Staticptr_cngCommTx+0x6>
 2ae:	21 30       	cpi	r18, 0x01	; 1
 2b0:	51 f4       	brne	.+20     	; 0x2c6 <HardWare_CallBack+0x32>
			}
#endif
#ifdef _SPI0_CHANNEL_
			case SPI0_CHANNEL:
			{
				spi_Tx(SPTR_DATA2SENT[Scounter]);
 2b2:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <Staticptr_cngCommTx+0x2>
 2b6:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <Staticptr_cngCommTx+0x3>
 2ba:	f9 01       	movw	r30, r18
 2bc:	e8 0f       	add	r30, r24
 2be:	f9 1f       	adc	r31, r25
 2c0:	80 81       	ld	r24, Z
 2c2:	0e 94 97 00 	call	0x12e	; 0x12e <spi_Tx>
				I2C_TxWithInterrupt(SPTR_DATA2SENT[Scounter]);
				break;
			}
#endif
		}
		Scounter++;
 2c6:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <Scounter>
 2ca:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <Scounter+0x1>
 2ce:	c9 01       	movw	r24, r18
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <Scounter+0x1>
 2d6:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <Scounter>
		
		if (Scounter>NUM_BYTES)
 2da:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <Staticptr_cngCommTx+0x4>
 2de:	50 91 63 04 	lds	r21, 0x0463	; 0x800463 <Staticptr_cngCommTx+0x5>
 2e2:	48 17       	cp	r20, r24
 2e4:	59 07       	cpc	r21, r25
 2e6:	20 f4       	brcc	.+8      	; 0x2f0 <HardWare_CallBack+0x5c>
		{
			Scounter--;	
 2e8:	30 93 5d 04 	sts	0x045D, r19	; 0x80045d <Scounter+0x1>
 2ec:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <Scounter>
		}
	}
	flage_Tx_Sending =1;  // set flage to work dispatcher
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <flage_Tx_Sending>
 2f6:	08 95       	ret

000002f8 <comm_TxRest>:
}


void comm_TxRest()
{
	Scounter			= 0;
 2f8:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <Scounter+0x1>
 2fc:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <Scounter>
	flage_Tx_Sending    = 0;
 300:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <flage_Tx_Sending>
 304:	08 95       	ret

00000306 <comm_TxInit>:
}

void comm_TxInit(CommTx_DataCfgType* ptr_struct)
{
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <comm_TxInit+0xa>
 310:	00 d0       	rcall	.+0      	; 0x312 <comm_TxInit+0xc>
 312:	00 d0       	rcall	.+0      	; 0x314 <comm_TxInit+0xe>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	8c 01       	movw	r16, r24
	* check if comm tx ideal first 
	* reset_comm Tx
	* take configuration to local static variable  
	* switch on channels to init the rquired one 
	*/
	comm_TxRest();										// rest static variables
 31a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <comm_TxRest>
	Staticptr_cngCommTx.Channel_Select = ptr_struct->Channel_Select;
 31e:	d8 01       	movw	r26, r16
 320:	16 96       	adiw	r26, 0x06	; 6
 322:	8c 91       	ld	r24, X
 324:	16 97       	sbiw	r26, 0x06	; 6
 326:	ee e5       	ldi	r30, 0x5E	; 94
 328:	f4 e0       	ldi	r31, 0x04	; 4
 32a:	86 83       	std	Z+6, r24	; 0x06
	Staticptr_cngCommTx.Num_bytes2sent = ptr_struct->Num_bytes2sent;
 32c:	14 96       	adiw	r26, 0x04	; 4
 32e:	2d 91       	ld	r18, X+
 330:	3c 91       	ld	r19, X
 332:	15 97       	sbiw	r26, 0x05	; 5
 334:	35 83       	std	Z+5, r19	; 0x05
 336:	24 83       	std	Z+4, r18	; 0x04
	Staticptr_cngCommTx.commtx_compelete = ptr_struct->commtx_compelete;
 338:	2d 91       	ld	r18, X+
 33a:	3c 91       	ld	r19, X
 33c:	11 97       	sbiw	r26, 0x01	; 1
 33e:	31 83       	std	Z+1, r19	; 0x01
 340:	20 83       	st	Z, r18
	Staticptr_cngCommTx.ptr_Data2Sent = ptr_struct->ptr_Data2Sent;
 342:	12 96       	adiw	r26, 0x02	; 2
 344:	2d 91       	ld	r18, X+
 346:	3c 91       	ld	r19, X
 348:	13 97       	sbiw	r26, 0x03	; 3
 34a:	33 83       	std	Z+3, r19	; 0x03
 34c:	22 83       	std	Z+2, r18	; 0x02
	
	switch(S_CHANNEL)
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	09 f5       	brne	.+66     	; 0x394 <comm_TxInit+0x8e>
		}
#endif
#ifdef _SPI0_CHANNEL_
		case SPI0_CHANNEL:
		{	
			Spi_Config my_spi={SPI_INTERRUPT_ENABLE,SPI_LSB_FIRST,SPI_MASTER_MODE,SPI_RAISING_EDGE,SPI_SAMPLE,SPI_FOSC_DIV128};
 352:	86 e0       	ldi	r24, 0x06	; 6
 354:	e0 e6       	ldi	r30, 0x60	; 96
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	de 01       	movw	r26, r28
 35a:	11 96       	adiw	r26, 0x01	; 1
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <comm_TxInit+0x56>
			spi_init(&my_spi);
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	0e 94 71 00 	call	0xe2	; 0xe2 <spi_init>
			Spi_AssignCallBack(HardWare_CallBack);	
 36c:	8a e4       	ldi	r24, 0x4A	; 74
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 99 00 	call	0x132	; 0x132 <Spi_AssignCallBack>
			spi_Tx(SPTR_DATA2SENT[0]); // sent the first element
 374:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <Staticptr_cngCommTx+0x2>
 378:	f0 91 61 04 	lds	r31, 0x0461	; 0x800461 <Staticptr_cngCommTx+0x3>
 37c:	80 81       	ld	r24, Z
 37e:	0e 94 97 00 	call	0x12e	; 0x12e <spi_Tx>
			Scounter++; 
 382:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <Scounter>
 386:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <Scounter+0x1>
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <Scounter+0x1>
 390:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <Scounter>
			I2C_AssignCallBackTx(HardWare_CallBack); // assign call back
			break;
		}
#endif
	}
}
 394:	26 96       	adiw	r28, 0x06	; 6
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <comm_TxDisspatcher>:
	}
}

void comm_TxDisspatcher()
{
	if (flage_Tx_Sending)
 3aa:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <flage_Tx_Sending>
 3ae:	88 23       	and	r24, r24
 3b0:	c1 f0       	breq	.+48     	; 0x3e2 <comm_TxDisspatcher+0x38>
	{
		flage_Tx_Sending = 0;
 3b2:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <flage_Tx_Sending>
		if (Scounter==NUM_BYTES)
 3b6:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <Staticptr_cngCommTx+0x4>
 3ba:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <Staticptr_cngCommTx+0x5>
 3be:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <Scounter>
 3c2:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <Scounter+0x1>
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	59 f4       	brne	.+22     	; 0x3e2 <comm_TxDisspatcher+0x38>
	}
}

static void Dissarm_HardwareInterrupt()
{
	switch (S_CHANNEL)
 3cc:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <Staticptr_cngCommTx+0x6>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <comm_TxDisspatcher+0x2e>
		}
#endif
#ifdef _SPI0_CHANNEL_
		case SPI0_CHANNEL:
		{
			spi_InterruptDisable();	
 3d4:	0e 94 95 00 	call	0x12a	; 0x12a <spi_InterruptDisable>
			/*
			*lock transmition until user funcation finish  
			*dissarm the interrupt of hardware 
			*/
			Dissarm_HardwareInterrupt();
			CALLTX_FINIHS();
 3d8:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <Staticptr_cngCommTx>
 3dc:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <Staticptr_cngCommTx+0x1>
 3e0:	09 95       	icall
 3e2:	08 95       	ret

000003e4 <SetPinDirection>:
void gpio_spi_cng_slave()
{
	SetPinDirection(B4,PORT_PIN_IN);	 //SS
	SetPinDirection(B5,PORT_PIN_IN);	 //MOSI
	SetPinDirection(B6,PORT_PIN_OUT);    //MISO
	SetPinDirection(B7,PORT_PIN_IN);     //SCK
 3e4:	88 30       	cpi	r24, 0x08	; 8
 3e6:	e8 f4       	brcc	.+58     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3e8:	61 11       	cpse	r22, r1
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	4a b3       	in	r20, 0x1a	; 26
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <SetPinDirection+0x16>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <SetPinDirection+0x12>
 3fe:	cb 01       	movw	r24, r22
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8a bb       	out	0x1a, r24	; 26
 406:	08 95       	ret
 408:	4a b3       	in	r20, 0x1a	; 26
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	84 2b       	or	r24, r20
 41e:	8a bb       	out	0x1a, r24	; 26
 420:	08 95       	ret
 422:	98 ef       	ldi	r25, 0xF8	; 248
 424:	98 0f       	add	r25, r24
 426:	98 30       	cpi	r25, 0x08	; 8
 428:	e8 f4       	brcc	.+58     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 42a:	61 11       	cpse	r22, r1
 42c:	0e c0       	rjmp	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42e:	47 b3       	in	r20, 0x17	; 23
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	b9 01       	movw	r22, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	9a 95       	dec	r25
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	cb 01       	movw	r24, r22
 442:	80 95       	com	r24
 444:	84 23       	and	r24, r20
 446:	87 bb       	out	0x17, r24	; 23
 448:	08 95       	ret
 44a:	47 b3       	in	r20, 0x17	; 23
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	9a 95       	dec	r25
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	cb 01       	movw	r24, r22
 45e:	84 2b       	or	r24, r20
 460:	87 bb       	out	0x17, r24	; 23
 462:	08 95       	ret
 464:	90 ef       	ldi	r25, 0xF0	; 240
 466:	98 0f       	add	r25, r24
 468:	98 30       	cpi	r25, 0x08	; 8
 46a:	e8 f4       	brcc	.+58     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 46c:	61 11       	cpse	r22, r1
 46e:	0e c0       	rjmp	.+28     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 470:	44 b3       	in	r20, 0x14	; 20
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	9a 95       	dec	r25
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	cb 01       	movw	r24, r22
 484:	80 95       	com	r24
 486:	84 23       	and	r24, r20
 488:	84 bb       	out	0x14, r24	; 20
 48a:	08 95       	ret
 48c:	44 b3       	in	r20, 0x14	; 20
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	b9 01       	movw	r22, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	9a 95       	dec	r25
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49e:	cb 01       	movw	r24, r22
 4a0:	84 2b       	or	r24, r20
 4a2:	84 bb       	out	0x14, r24	; 20
 4a4:	08 95       	ret
 4a6:	88 51       	subi	r24, 0x18	; 24
 4a8:	88 30       	cpi	r24, 0x08	; 8
 4aa:	e0 f4       	brcc	.+56     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ac:	61 11       	cpse	r22, r1
 4ae:	0e c0       	rjmp	.+28     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b0:	41 b3       	in	r20, 0x11	; 17
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c2:	cb 01       	movw	r24, r22
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	81 bb       	out	0x11, r24	; 17
 4ca:	08 95       	ret
 4cc:	41 b3       	in	r20, 0x11	; 17
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	81 bb       	out	0x11, r24	; 17
 4e4:	08 95       	ret

000004e6 <digitalWrite>:
 4e6:	88 30       	cpi	r24, 0x08	; 8
 4e8:	e8 f4       	brcc	.+58     	; 0x524 <digitalWrite+0x3e>
 4ea:	61 11       	cpse	r22, r1
 4ec:	0e c0       	rjmp	.+28     	; 0x50a <digitalWrite+0x24>
 4ee:	4b b3       	in	r20, 0x1b	; 27
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <digitalWrite+0x16>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <digitalWrite+0x12>
 500:	cb 01       	movw	r24, r22
 502:	80 95       	com	r24
 504:	84 23       	and	r24, r20
 506:	8b bb       	out	0x1b, r24	; 27
 508:	08 95       	ret
 50a:	4b b3       	in	r20, 0x1b	; 27
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <digitalWrite+0x32>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <digitalWrite+0x2e>
 51c:	cb 01       	movw	r24, r22
 51e:	84 2b       	or	r24, r20
 520:	8b bb       	out	0x1b, r24	; 27
 522:	08 95       	ret
 524:	98 ef       	ldi	r25, 0xF8	; 248
 526:	98 0f       	add	r25, r24
 528:	98 30       	cpi	r25, 0x08	; 8
 52a:	e8 f4       	brcc	.+58     	; 0x566 <digitalWrite+0x80>
 52c:	61 11       	cpse	r22, r1
 52e:	0e c0       	rjmp	.+28     	; 0x54c <digitalWrite+0x66>
 530:	48 b3       	in	r20, 0x18	; 24
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <digitalWrite+0x58>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <digitalWrite+0x54>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	88 bb       	out	0x18, r24	; 24
 54a:	08 95       	ret
 54c:	48 b3       	in	r20, 0x18	; 24
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	b9 01       	movw	r22, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <digitalWrite+0x74>
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	9a 95       	dec	r25
 55c:	e2 f7       	brpl	.-8      	; 0x556 <digitalWrite+0x70>
 55e:	cb 01       	movw	r24, r22
 560:	84 2b       	or	r24, r20
 562:	88 bb       	out	0x18, r24	; 24
 564:	08 95       	ret
 566:	90 ef       	ldi	r25, 0xF0	; 240
 568:	98 0f       	add	r25, r24
 56a:	98 30       	cpi	r25, 0x08	; 8
 56c:	e8 f4       	brcc	.+58     	; 0x5a8 <digitalWrite+0xc2>
 56e:	61 11       	cpse	r22, r1
 570:	0e c0       	rjmp	.+28     	; 0x58e <digitalWrite+0xa8>
 572:	45 b3       	in	r20, 0x15	; 21
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	b9 01       	movw	r22, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <digitalWrite+0x9a>
 57c:	66 0f       	add	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	9a 95       	dec	r25
 582:	e2 f7       	brpl	.-8      	; 0x57c <digitalWrite+0x96>
 584:	cb 01       	movw	r24, r22
 586:	80 95       	com	r24
 588:	84 23       	and	r24, r20
 58a:	85 bb       	out	0x15, r24	; 21
 58c:	08 95       	ret
 58e:	45 b3       	in	r20, 0x15	; 21
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	b9 01       	movw	r22, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <digitalWrite+0xb6>
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	9a 95       	dec	r25
 59e:	e2 f7       	brpl	.-8      	; 0x598 <digitalWrite+0xb2>
 5a0:	cb 01       	movw	r24, r22
 5a2:	84 2b       	or	r24, r20
 5a4:	85 bb       	out	0x15, r24	; 21
 5a6:	08 95       	ret
 5a8:	88 51       	subi	r24, 0x18	; 24
 5aa:	88 30       	cpi	r24, 0x08	; 8
 5ac:	e0 f4       	brcc	.+56     	; 0x5e6 <digitalWrite+0x100>
 5ae:	61 11       	cpse	r22, r1
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <digitalWrite+0xe8>
 5b2:	42 b3       	in	r20, 0x12	; 18
 5b4:	21 e0       	ldi	r18, 0x01	; 1
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	b9 01       	movw	r22, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <digitalWrite+0xda>
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	8a 95       	dec	r24
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <digitalWrite+0xd6>
 5c4:	cb 01       	movw	r24, r22
 5c6:	80 95       	com	r24
 5c8:	84 23       	and	r24, r20
 5ca:	82 bb       	out	0x12, r24	; 18
 5cc:	08 95       	ret
 5ce:	42 b3       	in	r20, 0x12	; 18
 5d0:	21 e0       	ldi	r18, 0x01	; 1
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	b9 01       	movw	r22, r18
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <digitalWrite+0xf6>
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	8a 95       	dec	r24
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <digitalWrite+0xf2>
 5e0:	cb 01       	movw	r24, r22
 5e2:	84 2b       	or	r24, r20
 5e4:	82 bb       	out	0x12, r24	; 18
 5e6:	08 95       	ret

000005e8 <gpio_spi_cng_master>:
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	8c e0       	ldi	r24, 0x0C	; 12
 5ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	8d e0       	ldi	r24, 0x0D	; 13
 5f4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	8e e0       	ldi	r24, 0x0E	; 14
 5fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	8f e0       	ldi	r24, 0x0F	; 15
 604:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
 608:	08 95       	ret

0000060a <gpio_uart_cng>:
}
void gpio_uart_cng()
{
	SetPinDirection(D0,PORT_PIN_IN); // uart RX
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	88 e1       	ldi	r24, 0x18	; 24
 60e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
	SetPinDirection(D1,PORT_PIN_OUT); // uart TX
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	89 e1       	ldi	r24, 0x19	; 25
 616:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
 61a:	08 95       	ret

0000061c <transmission_complete>:
#include "C:\Users\ebrah\Desktop\test_comm-stack0\comm_stack\comm_stack.h"
#include "C:\Users\ebrah\Desktop\test_comm-stack0\gpio\GPIO.h"

void transmission_complete()
{
	digitalWrite(A0,PORT_PIN_LEVEL_HIGH);
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 73 02 	call	0x4e6	; 0x4e6 <digitalWrite>
 624:	08 95       	ret

00000626 <Receive_Complete>:
}

void Receive_Complete(uint8* RX_data,uint16 num)
{
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	27 97       	sbiw	r28, 0x07	; 7
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
	CommTx_DataCfgType Data_toTransmit={transmission_complete,RX_data,num,SPI0_CHANNEL};
 63a:	2e e0       	ldi	r18, 0x0E	; 14
 63c:	33 e0       	ldi	r19, 0x03	; 3
 63e:	3a 83       	std	Y+2, r19	; 0x02
 640:	29 83       	std	Y+1, r18	; 0x01
 642:	9c 83       	std	Y+4, r25	; 0x04
 644:	8b 83       	std	Y+3, r24	; 0x03
 646:	7e 83       	std	Y+6, r23	; 0x06
 648:	6d 83       	std	Y+5, r22	; 0x05
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	8f 83       	std	Y+7, r24	; 0x07
	comm_TxInit(&Data_toTransmit);
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	0e 94 83 01 	call	0x306	; 0x306 <comm_TxInit>
	RX_CommFree();
 656:	0e 94 0f 01 	call	0x21e	; 0x21e <RX_CommFree>
}
 65a:	27 96       	adiw	r28, 0x07	; 7
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <main>:



int main(void)
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 d0       	rcall	.+0      	; 0x672 <main+0x6>
 672:	00 d0       	rcall	.+0      	; 0x674 <main+0x8>
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
	sei(); // enable global interrupt
 678:	78 94       	sei

	SetPinDirection(A0,PORT_PIN_OUT);// test 
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SetPinDirection>
	digitalWrite(A0,PORT_PIN_LEVEL_LOW);
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 73 02 	call	0x4e6	; 0x4e6 <digitalWrite>
	
	gpio_uart_cng();
 68a:	0e 94 05 03 	call	0x60a	; 0x60a <gpio_uart_cng>
	gpio_spi_cng_master();
 68e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpio_spi_cng_master>
	
	RX_cfg_t message1 ={Receive_Complete,UART0,'*'}; // call back fun when recieve complet , channel, confirmation litter
 692:	83 e1       	ldi	r24, 0x13	; 19
 694:	93 e0       	ldi	r25, 0x03	; 3
 696:	9a 83       	std	Y+2, r25	; 0x02
 698:	89 83       	std	Y+1, r24	; 0x01
 69a:	1b 82       	std	Y+3, r1	; 0x03
 69c:	8a e2       	ldi	r24, 0x2A	; 42
 69e:	8c 83       	std	Y+4, r24	; 0x04
    Comm_RxInit(&message1);
 6a0:	ce 01       	movw	r24, r28
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	0e 94 16 01 	call	0x22c	; 0x22c <Comm_RxInit>
	
    while (1) 
    {
		RX_com_dispatch();
 6a8:	0e 94 30 01 	call	0x260	; 0x260 <RX_com_dispatch>
		comm_TxDisspatcher();
 6ac:	0e 94 d5 01 	call	0x3aa	; 0x3aa <comm_TxDisspatcher>
 6b0:	fb cf       	rjmp	.-10     	; 0x6a8 <main+0x3c>

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
